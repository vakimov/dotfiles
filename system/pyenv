# Check if pyenv exists

if [ ! -d ~/.pyenv ]; then
  return  # `exit 1` would quit the shell itself
fi


export PYENV_VIRTUALENV_DISABLE_PROMPT=1


# Define environment variable

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"


# Enable shims and autocompletion

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"


# Check if pipenv shell activated

if [ "$PIPENV_ACTIVE" == "1" ]; then
  _pyenv_virtualenv_hook() {
    :  # echo "_pyenv_virtualenv_hook called"
  }
  pyenvVirtualenvUpdatePrompt() {
    :  # echo "pyenvVirtualenvUpdatePrompt called"
  }
  return
fi

# Custom pyenv prompt

pyenvVirtualenvUpdatePrompt() {
    RED='\[\e[0;31m\]'
    GREEN='\[\e[0;32m\]'
    BLUE='\[\e[0;34m\]'
    RESET='\[\e[0m\]'
    [ -z "$PYENV_VIRTUALENV_ORIGINAL_PS1" ] && export PYENV_VIRTUALENV_ORIGINAL_PS1="$PS1"
    [ -z "$PYENV_VIRTUALENV_GLOBAL_NAME" ] && export PYENV_VIRTUALENV_GLOBAL_NAME="$(pyenv global)"
    VENV_NAME="$(pyenv version-name)"
    VENV_NAME="${VENV_NAME##*/}"
    GLOBAL_NAME="$PYENV_VIRTUALENV_GLOBAL_NAME"

    # non-global versions:
    COLOR="$BLUE"
    # global version:
    [ "$VENV_NAME" == "$GLOBAL_NAME" ] && COLOR="$RED"
    # virtual envs:
    [ "${VIRTUAL_ENV##*/}" == "$VENV_NAME" ] && COLOR="$GREEN"

    if [ -z "$COLOR" ]; then
        PS1="$PYENV_VIRTUALENV_ORIGINAL_PS1"
    else
        PS1="($COLOR${VENV_NAME}$RESET) $PYENV_VIRTUALENV_ORIGINAL_PS1"
    fi
    export PS1
}
export PROMPT_COMMAND="$PROMPT_COMMAND pyenvVirtualenvUpdatePrompt;"



